Menu="Utilities"
Icon="bucketbackup.png"
Version="0.01"
Author="John Labod"
Title="Bucket Backup"

---
<?php

$plugin = "bucketbackup";
require_once("/usr/local/emhttp/plugins/{$plugin}/include/api.php");

function showSettings($settings) {
	global $api_id;
	global $api_key;
	global $backup_locations;
	global $backup_interval;
	global $time;
	global $day_of_week;
	global $day_of_month;
	global $bucket_type;
	global $encryption_password;
	
	$json = json_decode($settings,true);
	$api_id = $json["api_id"];
	$api_key = $json["api_key"];
	$backup_locations = $json["backup_location"];
	$backup_interval = $json["backup_interval"];
	$time = $json["time"];
	$day_of_week = $json["day_of_week"];
	$day_of_month = $json["day_of_month"];
	$bucket_type = $json["bucket_type"];
	$encryption_password = $json["encryption_password"];
}

$api_id = "";
$api_key = "";
$backup_locations = "";
$backup_interval = "";
$time = "";
$day_of_week = "";
$day_of_month = "";
$bucket_type = "";
$encryption_password = "";

if (file_exists("/usr/local/emhttp/plugins/{$plugin}/settings.config")) {
	showSettings(file_get_contents("/usr/local/emhttp/plugins/{$plugin}/settings.config"));
}

if (count($_POST)) {
        if ($_POST['#apply'] == "Apply") {
                $settingsObj = new \stdClass();
                $settingsObj->api_id = $_POST["api_id"];
                $settingsObj->api_key = $_POST["api_key"];
                $settingsObj->backup_interval = $_POST["backup_interval"];
				$settingsObj->time = $_POST["time"];
				$settingsObj->day_of_week = $_POST["day_of_week"];
				$settingsObj->day_of_month = $_POST["day_of_month"];
                $settingsObj->backup_location = $_POST["backup_location"];
                $settingsObj->bucket_type = $_POST["bucket_type"];
                $settingsObj->encryption_password = $_POST["encryption_password"];

                $settingsJson = json_encode($settingsObj);
				
				//Update the settings config file
				update_settings($settingsJson);
                //Update the cron with the backup schedule
                update_cron($_POST["backup_interval"]);
				
				showSettings($settingsJson);
        }
}

?>

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>" >
<script type="text/javascript">

	function openFileBrowser(el) {
		var p = $(el);
		// Skip is fileTree is already open
		if ( p.next().hasClass('fileTree') ){return null;}
		// create a random id
		var r = Math.floor((Math.random()*1000)+1);
		// Add a new span and load fileTree
		p.after("<div id='fileTree"+r+"' class='textarea fileTree'></div>");
		var ft = $('#fileTree'+r);
		ft.fileTree({
			root: '/mnt/user/',
			filter: 'HIDE_FILES_FILTER',
			allowBrowsing : true
		}, function(file) {
		}, function(folder){
			p.val(folder);
			p.trigger('change');
		});
		// Format fileTree according to parent position, height and width
		ft.css({
			'left':p.position().left,
			'top':( p.position().top + p.clientHeight ),
			'width':(p.width()),
			'position': 'absolute',
			'background-color': 'white',
			'z-index': 1000
		});
		// close if click elsewhere
		$(document).mouseup(function(e) {
			if(!ft.is(e.target) && ft.has(e.target).length === 0) {
				ft.slideUp('fast',function (){ 
					$(ft).remove();
				});
			}
		});
		// close if parent changed
		p.bind('keydown',function() {
			ft.slideUp('fast',function (){
				$(ft).remove();
			});
		});
		// Open fileTree
		ft.slideDown('fast');
	} 
</script>


<div id="title" class="nocontrol">Common Settings</div>
<form name="common_settings" method="POST">

    <p></p>

    <dl>
        <dt style="cursor: help;">Bucket Type:</dt>
        <dd>
			<select name="bucket_type" size="1" id="bucket_type" >
				<option value="" disabled="true">Select...</option>
				<option <?php if ($bucket_type == 'backblaze' ) echo 'selected' ; ?> value="backblaze">Back Blaze</option>
			</select>
		</dd>
    </dl>

    <blockquote class="inline_help">
        <p>Sets which service to store your backups with</p>
    </blockquote>

    <dl>
		<dt style="cursor: help;">API Key:</dt>
		<dd>
			<input type="text" name="api_key" id="api_key" value="<?php echo $api_key; ?>" >
		</dd>
	</dl>

	<blockquote class="inline_help">
        <p>This is your API key. You can get it from your backblaze account. If you don't know this then sign into your backblaze account and create an application key</p>
    </blockquote>

    <dl>
		<dt style="cursor: help;">API Key ID:</dt>
		<dd>
			<input type="text" name="api_id" id="api_id" value="<?php echo $api_id; ?>" >
		</dd>
	</dl>

	<blockquote class="inline_help">
        <p>This is your API Key ID. You can get it from your backblaze account. If you don't know this then sign into your backblaze account and create an application key</p>
    </blockquote>
	
	<dl>
		<dt style="cursor: help;">Encryption password:</dt>
		<dd>
			<input type="password" name="encryption_password" id="encryption_password" value="<?php echo $encryption_password; ?>" >
		</dd>
	</dl>

	<blockquote class="inline_help">
        <p>Backups are encrypted before being stored. This password is used to decrypt your backup. Please do not forget it or you will not be able to decrypt your backups</p>
    </blockquote>
	
	<dl>
		<dt style="cursor: help;">Backup Location:</dt>
		<dd id="backup_location_list" style="margin-left: 0;">
			<input type="text" name="backup_location[]"
				onclick="openFileBrowser(this);"
				value="<?php  echo $backup_locations[0] ?>" >
			<button type="button" onclick="add_backup_location()">Add</button>
			<? if ($backup_locations != ""): ?>
				<?php for($i = 1; $i < sizeof($backup_locations); $i++): ?>
					<div style="margin-left: 35%;">
						<input type="text" name="backup_location[]" 
							onclick="openFileBrowser(this);"
							value="<?php echo $backup_locations[$i]; ?>" >
						<button type="button" onclick="removeLocation(this)">Remove</button>
					</div>
				<?php endfor; ?>
			<? endif; ?>
		</dd>
		
	</dl>
	<blockquote class="inline_help">
        <p>These are the files and folders you want stored</p>
    </blockquote>

    <dl>
        <dt style="cursor: help;">Backup Interval:</dt>
        <dd>
			<select name="backup_interval" size="1" id="backup_interval" onchange="changeBackupInterval()">
				<option <?php if ($backup_interval == 'never' ) echo 'selected' ; ?> value="never">Never</option>
				<option <?php if ($backup_interval == 'daily' ) echo 'selected' ; ?> value="daily">Daily</option>
				<option <?php if ($backup_interval == 'weekly' ) echo 'selected' ; ?> value="weekly">Weekly</option>
				<option <?php if ($backup_interval == 'monthly' ) echo 'selected' ; ?> value="monthly">Monthly</option>
			</select>
			<?php readfile("/usr/local/emhttp/plugins/{$plugin}/timeselect.php") ?>
		</dd>
    </dl>
    <blockquote class="inline_help">
        <p>Specify how often you want your files backed up</p>
    </blockquote>

    <dl>
        <dt>&nbsp;</dt>
        <dd>
			<input id="submit_settings" type="submit" name="#apply" value="Apply">
			<input type="button" value="Done" onclick="done()">
		</dd>
    </dl>

</form>

<div id="title" class="nocontrol">Restore Backup</div>
<form name="restore_backup" method="POST">
	<p></p>

    <dl>
        <dt style="cursor: help;">Backup:</dt>
        <dd>
			<select name="bucket_to_restore" size="1">
				<option value="" disabled="true">Select...</option>
			</select>
		</dd>
    </dl>

    <blockquote class="inline_help">
        <p>A list of backups from the selected backup service.</p>
    </blockquote>
	
	<dl>
		<dt style="cursor: help;">Restore Location:</dt>
		<dd>
			<input type="text" name="restore_location">
		</dd>
	</dl>

	<blockquote class="inline_help">
        <p>This is the folder that you want to restore your backup files to.</p>
    </blockquote>
</form>

<script type="text/javascript">
	
	var interval = document.getElementById("backup_interval");
	var time = document.getElementById("time");
	var day_of_week = document.getElementById("day_of_week");
	var day_of_month = document.getElementById("day_of_month");
	
	<?php if($time != ""): ?>
		//Set the time to the value in the settings file
		var selected_time = "<?php echo $time ?>";
		var options = time.options;
		for(var i = 0; i < options.length; i++) {
			if(options[i].value === selected_time) {
				options[i].selected = true;
			}
		}
	<?php endif; ?>
	
	<?php if($day_of_month != ""): ?>
		//Set the day of month to the value in the settings file
		var selected_day_of_month = <?php echo $day_of_month ?>;
		var options = day_of_month.options;
		for(var i = 0; i < options.length; i++) {
			if(parseInt(options[i].value) === selected_day_of_month) {
				options[i].selected = true;
			}
		}
	<?php endif; ?>
	
	<?php if($day_of_week != ""): ?>
		//Set the day of week to the value in the settings file
		var selected_day_of_week = <?php echo $day_of_week ?>;
		var options = day_of_week.options;
		for(var i = 0; i < options.length; i++) {
			if(parseInt(options[i].value) === selected_day_of_week) {
				options[i].selected = true;
			}
		}
	<?php endif; ?>
	
	
	changeBackupInterval();
	
	function changeBackupInterval() {
		
		switch(interval.value) {
			case 'daily':
				time.disabled = false;
				day_of_week.disabled = true;
				day_of_month.disabled = true;
				break;
			case 'weekly':
				time.disabled = false;
				day_of_week.disabled = false;
				day_of_month.disabled = true;
				break;
			case 'monthly':
				time.disabled = false;
				day_of_week.disabled = false;
				day_of_month.disabled = false;
				break;
			default:
				time.disabled = true;
				day_of_week.disabled = true;
				day_of_month.disabled = true;
		}
	}
	
	// When the user clicks 'Add' on the backup location list this adds an input where they can add an extra folder to be backed up
	function add_backup_location() {
		var list = document.getElementById("backup_location_list");
		
		var container = document.createElement("div");
		container.style = "margin-left:35%;";
		
		var inputField = document.createElement("input");
		inputField.type = "text";
		inputField.name = "backup_location[]";
		
		container.appendChild(inputField);
		
		var removeButton = document.createElement("button");
		removeButton.type = "button";
		removeButton.innerHTML = "Remove";
		removeButton.addEventListener("click", removeLocation);
		container.appendChild(removeButton);
		
		list.appendChild(container);
	}
	
	function removeLocation(el) {
		var inputToRemove = el.parentNode || this.parentNode;
		inputToRemove.parentNode.removeChild(inputToRemove);
	}
	
</script>
